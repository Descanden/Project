-- Create sequences for each table
CREATE SEQUENCE TB_STATUS_SEQ MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 20 NOCYCLE;
CREATE SEQUENCE TB_USER_SEQ MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 20 NOCYCLE;
CREATE SEQUENCE TB_MENTORSHIP_SEQ MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 20 NOCYCLE;
CREATE SEQUENCE TB_SESSION_SEQ MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 20 NOCYCLE;
CREATE SEQUENCE TB_PAYMENT_SEQ MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 20 NOCYCLE;
CREATE SEQUENCE TB_REVIEW_SEQ MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 20 NOCYCLE;
CREATE SEQUENCE TB_ROLE_SEQ MINVALUE 1 START WITH 1 INCREMENT BY 1 CACHE 20 NOCYCLE;

-- Create tables with VARCHAR2 IDs
CREATE TABLE "TB_STATUS" 
(
    "ID_STATUS" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "METHOD" VARCHAR2(10 CHAR) NOT NULL ENABLE, 
    CONSTRAINT "TB_STATUS_PK" PRIMARY KEY ("ID_STATUS") ENABLE
);

CREATE TABLE "TB_USER" 
(
    "ID_USER" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "DATE_OF_BIRTH" DATE NOT NULL ENABLE, 
    "EMAIL" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "ADDRESS" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
    "REGIS_DATE" DATE NOT NULL ENABLE, 
    "TB_ROLE_ID_ROLE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "NO_HANDPHONE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "PASSWORD" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
    CONSTRAINT "TB_USER_PK" PRIMARY KEY ("ID_USER") ENABLE
);

CREATE TABLE "TB_MENTORSHIP" 
(
    "ID_MENTORSHIP" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "SPECIALIZATION" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "AVAILABILITY" VARCHAR2(200 CHAR), 
    "RATE" NUMBER, 
    "DESCRIPTION" VARCHAR2(150 CHAR) NOT NULL ENABLE, 
    "PRICE" NUMBER(*,0) NOT NULL ENABLE, 
    "TB_STATUS_ID_STATUS" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "TB_USER_ID_USER" VARCHAR2(50 CHAR), 
    "IMG" VARCHAR2(255 CHAR), 
    CONSTRAINT "TB_MENTORSHIP_PK" PRIMARY KEY ("ID_MENTORSHIP") ENABLE
);

CREATE TABLE "TB_SESSION" 
(
    "ID_SESSION" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "TIME_START" DATE NOT NULL ENABLE, 
    "TIME_END" DATE NOT NULL ENABLE, 
    "TB_REVIEW_ID_REVIEW" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "TB_PAYMENT_ID_PAYMENT" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "TB_USER_ID_USER" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "TB_MENTORSHIP_ID_MENTORSHIP" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    CONSTRAINT "TB_SESSION_PK" PRIMARY KEY ("ID_SESSION") ENABLE
);

CREATE TABLE "TB_PAYMENT" 
(
    "ID_PAYMENT" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "AMOUNT" NUMBER(*,0) NOT NULL ENABLE, 
    "date" DATE NOT NULL ENABLE, 
    "METHOD" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "TB_SESSION_ID_SESSION" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    CONSTRAINT "TB_PAYMENT_PK" PRIMARY KEY ("ID_PAYMENT") ENABLE
);

CREATE TABLE "TB_REVIEW" 
(
    "ID_REVIEW" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "RATING" NUMBER(*,0) NOT NULL ENABLE, 
    "comment" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
    "date" DATE NOT NULL ENABLE, 
    "TB_SESSION_ID_SESSION" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "TB_USER_ID_USER" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    CONSTRAINT "TB_REVIEW_PK" PRIMARY KEY ("ID_REVIEW") ENABLE
);

CREATE TABLE "TB_ROLE" 
(
    "ID_ROLE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    "NAMEROLE" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
    CONSTRAINT "TB_ROLE_PK" PRIMARY KEY ("ID_ROLE") ENABLE
);

-- Create triggers for each table to auto-generate IDs with prefix
CREATE OR REPLACE TRIGGER TRG_TB_STATUS_BI
BEFORE INSERT ON "TB_STATUS"
FOR EACH ROW
BEGIN
    SELECT 'STATUS_' || TO_CHAR(TB_STATUS_SEQ.NEXTVAL, 'FM000000') INTO :NEW.ID_STATUS FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TB_USER_BI
BEFORE INSERT ON "TB_USER"
FOR EACH ROW
BEGIN
    SELECT 'USER_' || TO_CHAR(TB_USER_SEQ.NEXTVAL, 'FM000000') INTO :NEW.ID_USER FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TB_MENTORSHIP_BI
BEFORE INSERT ON "TB_MENTORSHIP"
FOR EACH ROW
BEGIN
    SELECT 'MENTORSHIP_' || TO_CHAR(TB_MENTORSHIP_SEQ.NEXTVAL, 'FM000000') INTO :NEW.ID_MENTORSHIP FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TB_SESSION_BI
BEFORE INSERT ON "TB_SESSION"
FOR EACH ROW
BEGIN
    SELECT 'SESSION_' || TO_CHAR(TB_SESSION_SEQ.NEXTVAL, 'FM000000') INTO :NEW.ID_SESSION FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TB_PAYMENT_BI
BEFORE INSERT ON "TB_PAYMENT"
FOR EACH ROW
BEGIN
    SELECT 'PAYMENT_' || TO_CHAR(TB_PAYMENT_SEQ.NEXTVAL, 'FM000000') INTO :NEW.ID_PAYMENT FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TB_REVIEW_BI
BEFORE INSERT ON "TB_REVIEW"
FOR EACH ROW
BEGIN
    SELECT 'REVIEW_' || TO_CHAR(TB_REVIEW_SEQ.NEXTVAL, 'FM000000') INTO :NEW.ID_REVIEW FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TB_ROLE_BI
BEFORE INSERT ON "TB_ROLE"
FOR EACH ROW
BEGIN
    SELECT 'ROLE_' || TO_CHAR(TB_ROLE_SEQ.NEXTVAL, 'FM000000') INTO :NEW.ID_ROLE FROM DUAL;
END;
/

-- Foreign key constraints
ALTER TABLE "TB_MENTORSHIP" ADD CONSTRAINT "TB_MENTORSHIP_TB_STATUS_FK" FOREIGN KEY ("TB_STATUS_ID_STATUS")
REFERENCES "TB_STATUS" ("ID_STATUS") ENABLE;

ALTER TABLE "TB_MENTORSHIP" ADD CONSTRAINT "TB_MENTORSHIP_TB_USER_FK" FOREIGN KEY ("TB_USER_ID_USER")
REFERENCES "TB_USER" ("ID_USER") ENABLE;

ALTER TABLE "TB_PAYMENT" ADD CONSTRAINT "TB_PAYMENT_TB_SESSION_FK" FOREIGN KEY ("TB_SESSION_ID_SESSION")
REFERENCES "TB_SESSION" ("ID_SESSION") ENABLE;

ALTER TABLE "TB_REVIEW" ADD CONSTRAINT "TB_REVIEW_TB_SESSION_FK" FOREIGN KEY ("TB_SESSION_ID_SESSION")
REFERENCES "TB_SESSION" ("ID_SESSION") ENABLE;

ALTER TABLE "TB_REVIEW" ADD CONSTRAINT "TB_REVIEW_TB_USER_FK" FOREIGN KEY ("TB_USER_ID_USER")
REFERENCES "TB_USER" ("ID_USER") ENABLE;

ALTER TABLE "TB_SESSION" ADD CONSTRAINT "TB_SESSION_TB_MENTORSHIP_FK" FOREIGN KEY ("TB_MENTORSHIP_ID_MENTORSHIP")
REFERENCES "TB_MENTORSHIP" ("ID_MENTORSHIP") ENABLE;

ALTER TABLE "TB_SESSION" ADD CONSTRAINT "TB_SESSION_TB_PAYMENT_FK" FOREIGN KEY ("TB_PAYMENT_ID_PAYMENT")
REFERENCES "TB_PAYMENT" ("ID_PAYMENT") ENABLE;

ALTER TABLE "TB_SESSION" ADD CONSTRAINT "TB_SESSION_TB_REVIEW_FK" FOREIGN KEY ("TB_REVIEW_ID_REVIEW")
REFERENCES "TB_REVIEW" ("ID_REVIEW") ENABLE;

ALTER TABLE "TB_SESSION" ADD CONSTRAINT "TB_SESSION_TB_USER_FK" FOREIGN KEY ("TB_USER_ID_USER")
REFERENCES "TB_USER" ("ID_USER") ENABLE;

ALTER TABLE "TB_USER" ADD CONSTRAINT "TB_USER_TB_ROLE_FK" FOREIGN KEY ("TB_ROLE_ID_ROLE")
REFERENCES "TB_ROLE" ("ID_ROLE") ENABLE;
