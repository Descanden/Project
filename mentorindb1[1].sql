CREATE TABLE "TB_STATUS" (
  "ID_STATUS" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "METHOD" VARCHAR2(10 CHAR) NOT NULL ENABLE,
  CONSTRAINT "TB_STATUS_PK" PRIMARY KEY ("ID_STATUS") ENABLE
);
CREATE TABLE "TB_USER" (
  "ID_USER" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "NAME" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "DATE_OF_BIRTH" DATE NOT NULL ENABLE,
  "EMAIL" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "ADDRESS" VARCHAR2(100 CHAR) NOT NULL ENABLE,
  "REGIS_DATE" DATE NOT NULL ENABLE,
  "TB_ROLE_ID_ROLE" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "NO_HANDPHONE" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "PASSWORD" VARCHAR2(255) NOT NULL ENABLE,
  CONSTRAINT "TB_USER_PK" PRIMARY KEY ("ID_USER") ENABLE
);
CREATE TABLE "TB_MENTORSHIP" (
  "ID_MENTORSHIP" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "SPECIALIZATION" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "AVAILABILITY" VARCHAR2(200),
  "RATE" NUMBER,
  "DESCRIPTION" VARCHAR2(150 CHAR) NOT NULL ENABLE,
  "PRICE" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "TB_STATUS_ID_STATUS" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "TB_USER_ID_USER" NUMBER,
  "IMG" VARCHAR2(255),
  CONSTRAINT "TB_MENTORSHIP_PK" PRIMARY KEY ("ID_MENTORSHIP") ENABLE
);
CREATE TABLE "TB_SESSION" (
  "ID_SESSION" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "TIME_START" DATE NOT NULL ENABLE,
  "TIME_END" DATE NOT NULL ENABLE,
  "TB_REVIEW_ID_REVIEW" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "TB_PAYMENT_ID_PAYMENT" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "TB_USER_ID_USER" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "TB_MENTORSHIP_ID_MENTORSHIP" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  CONSTRAINT "TB_SESSION_PK" PRIMARY KEY ("ID_SESSION") ENABLE
);
CREATE TABLE "TB_PAYMENT" (
  "ID_PAYMENT" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "AMOUNT" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "date" DATE NOT NULL ENABLE,
  "METHOD" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "TB_SESSION_ID_SESSION" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  CONSTRAINT "TB_PAYMENT_PK" PRIMARY KEY ("ID_PAYMENT") ENABLE
);
CREATE TABLE "TB_REVIEW" (
  "ID_REVIEW" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "RATING" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "comment" VARCHAR2(100 CHAR) NOT NULL ENABLE,
  "date" DATE NOT NULL ENABLE,
  "TB_SESSION_ID_SESSION" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "TB_USER_ID_USER" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  CONSTRAINT "TB_REVIEW_PK" PRIMARY KEY ("ID_REVIEW") ENABLE
);
CREATE TABLE "TB_ROLE" (
  "ID_ROLE" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  "NAMEROLE" VARCHAR2(50 CHAR) NOT NULL ENABLE,
  CONSTRAINT "TB_ROLE_PK" PRIMARY KEY ("ID_ROLE") ENABLE
);

ALTER TABLE "TB_MENTORSHIP"
ADD CONSTRAINT "TB_MENTORSHIP_TB_STATUS_FK" FOREIGN KEY ("TB_STATUS_ID_STATUS") REFERENCES "TB_STATUS" ("ID_STATUS") ENABLE;
ALTER TABLE "TB_MENTORSHIP"
ADD CONSTRAINT "TB_MENTORSHIP_TB_USER_FK" FOREIGN KEY ("TB_USER_ID_USER") REFERENCES "TB_USER" ("ID_USER") ENABLE;
ALTER TABLE "TB_PAYMENT"
ADD CONSTRAINT "TB_PAYMENT_TB_SESSION_FK" FOREIGN KEY ("TB_SESSION_ID_SESSION") REFERENCES "TB_SESSION" ("ID_SESSION") ENABLE;
ALTER TABLE "TB_REVIEW"
ADD CONSTRAINT "TB_REVIEW_TB_SESSION_FK" FOREIGN KEY ("TB_SESSION_ID_SESSION") REFERENCES "TB_SESSION" ("ID_SESSION") ENABLE;
ALTER TABLE "TB_REVIEW"
ADD CONSTRAINT "TB_REVIEW_TB_USER_FK" FOREIGN KEY ("TB_USER_ID_USER") REFERENCES "TB_USER" ("ID_USER") ENABLE;
ALTER TABLE "TB_SESSION"
ADD CONSTRAINT "TB_SESSION_TB_MENTORSHIP_FK" FOREIGN KEY ("TB_MENTORSHIP_ID_MENTORSHIP") REFERENCES "TB_MENTORSHIP" ("ID_MENTORSHIP") ENABLE;
ALTER TABLE "TB_SESSION"
ADD CONSTRAINT "TB_SESSION_TB_PAYMENT_FK" FOREIGN KEY ("TB_PAYMENT_ID_PAYMENT") REFERENCES "TB_PAYMENT" ("ID_PAYMENT") ENABLE;
ALTER TABLE "TB_SESSION"
ADD CONSTRAINT "TB_SESSION_TB_REVIEW_FK" FOREIGN KEY ("TB_REVIEW_ID_REVIEW") REFERENCES "TB_REVIEW" ("ID_REVIEW") ENABLE;
ALTER TABLE "TB_SESSION"
ADD CONSTRAINT "TB_SESSION_TB_USER_FK" FOREIGN KEY ("TB_USER_ID_USER") REFERENCES "TB_USER" ("ID_USER") ENABLE;
ALTER TABLE "TB_USER"
ADD CONSTRAINT "TB_USER_TB_ROLE_FK" FOREIGN KEY ("TB_ROLE_ID_ROLE") REFERENCES "TB_ROLE" ("ID_ROLE") ENABLE;

CREATE OR REPLACE FUNCTION "CUSTOM_AUTH" (p_username in VARCHAR2, p_password in VARCHAR2) return BOOLEAN is l_password varchar2(4000);
l_stored_password varchar2(4000);
l_expires_on date;
l_count number;
begin -- First, check to see if the user is in the user table
select count(*) into l_count
from demo_users
where user_name = p_username;
if l_count > 0 then -- First, we fetch the stored hashed password & expire date
select password,
  expires_on into l_stored_password,
  l_expires_on
from demo_users
where user_name = p_username;
-- Next, we check to see if the user's account is expired
-- If it is, return FALSE
if l_expires_on > sysdate
or l_expires_on is null then -- If the account is not expired, we have to apply the custom hash
-- function to the password
l_password := custom_hash(p_username, p_password);
-- Finally, we compare them to see if they are the same and return
-- either TRUE or FALSE
if l_password = l_stored_password then return true;
else return false;
end if;
else return false;
end if;
else -- The username provided is not in the DEMO_USERS table
return false;
end if;
end;
/ /
CREATE OR REPLACE FUNCTION "CUSTOM_HASH" (p_username in varchar2, p_password in varchar2) return varchar2 is l_password varchar2(4000);
l_salt varchar2(4000) := 'DXY3ZR9SF73P30RBCHELUL0NH02VW5';
begin -- This function should be wrapped, as the hash algorhythm is exposed here.
-- You can change the value of l_salt or the method of which to call the
-- DBMS_OBFUSCATOIN toolkit, but you much reset all of your passwords
-- if you choose to do this.
l_password := utl_raw.cast_to_raw(
  dbms_obfuscation_toolkit.md5 (
    input_string => p_password || substr(l_salt, 10, 13) || p_username || substr(l_salt, 4, 10)
  )
);
return l_password;
end;

/ / CREATE UNIQUE INDEX "TB_MENTORSHIP_PK" ON "TB_MENTORSHIP" ("ID_MENTORSHIP");
CREATE UNIQUE INDEX "TB_PAYMENT__IDX" ON "TB_PAYMENT" ("TB_SESSION_ID_SESSION");
CREATE UNIQUE INDEX "TB_PAYMENT_PK" ON "TB_PAYMENT" ("ID_PAYMENT");
CREATE UNIQUE INDEX "TB_REVIEW__IDX" ON "TB_REVIEW" ("TB_SESSION_ID_SESSION");
CREATE UNIQUE INDEX "TB_REVIEW_PK" ON "TB_REVIEW" ("ID_REVIEW");
CREATE UNIQUE INDEX "TB_ROLE_PK" ON "TB_ROLE" ("ID_ROLE");
CREATE UNIQUE INDEX "TB_SESSION__IDX" ON "TB_SESSION" ("TB_PAYMENT_ID_PAYMENT");
CREATE UNIQUE INDEX "TB_SESSION__IDXV1" ON "TB_SESSION" ("TB_REVIEW_ID_REVIEW");
CREATE UNIQUE INDEX "TB_SESSION_PK" ON "TB_SESSION" ("ID_SESSION");
CREATE UNIQUE INDEX "TB_STATUS_PK" ON "TB_STATUS" ("ID_STATUS");
CREATE UNIQUE INDEX "TB_USER_PK" ON "TB_USER" ("ID_USER");
CREATE SEQUENCE "DEMO_CUST_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER NOCYCLE;
CREATE SEQUENCE "DEMO_ORDER_ITEMS_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER NOCYCLE;
CREATE SEQUENCE "DEMO_ORD_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11 CACHE 20 NOORDER NOCYCLE;
CREATE SEQUENCE "DEMO_PROD_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER NOCYCLE;
CREATE SEQUENCE "DEMO_USERS_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER NOCYCLE;
CREATE SEQUENCE "MENTOR_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER NOCYCLE;
CREATE SEQUENCE "USER_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER NOCYCLE;